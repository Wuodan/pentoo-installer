#!/bin/bash -x
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# configure_system
# gives user choices to further edit target system
#
# parameters (required)
#  CONFIG_LIST: One string items of defined FSspec
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#
# writes menus and noise to STDERR

# location of other scripts to source
readonly SHAREDIR="$(dirname ${0})" || exit $?

# source common variables, functions and error handling
source "${SHAREDIR}"/common.sh || exit $?

#########################################
## START: dialog functions/definitions ##

# setbootopts()
# sets boot time services
# chroot must be prepared outside this function!
#
# parameters (none)
setbootopts() {
	while true; do
		local _MENU_ITEMS=()
		if chroot "${DESTDIR}" rc-update show | grep NetworkManager | grep -q default; then
			_MENU_ITEMS+=("BootQuiet"	"NetworkManager is currently enabled at boot, disable NetworkManager?")
		else
			_MENU_ITEMS+=("BootNet"		"NetworkManager is currently disabled at boot, enable NetworkManager?")
		fi
		if chroot "${DESTDIR}" rc-update show | grep bluetooth | grep -q default; then
			_MENU_ITEMS+=("BootNoBluetooth"	"Bluetooth is currently enabled at boot, disable bluetooth?")
		else
			_MENU_ITEMS+=("BootBluetooth"		"Bluetooth is currently disabled at boot, enable bluetooth?")
		fi
		if chroot "${DESTDIR}" rc-update show | grep xdm | grep default; then
			_MENU_ITEMS+=("BootConsole"	"Currently booting to X (xdm/slim), switch to console for login?")
		else
			_MENU_ITEMS+=("BootX"		"Currently booting to console, switch to X for login (xdm/slim)?")
		fi
		_MENU_ITEMS+=("DONE"			"Return to Configuration Menu" )

		# expand menu items array below
		NEWSELECTION="$(show_dialog --menu 'Boot services' \
			0 0 0 "${_MENU_ITEMS[@]}")" || exit $?
		# call subscript by selected item
		case "${NEWSELECTION}" in
			# Return to main menu
			"DONE")
				return 0
				;;
			"BootQuiet")
				chroot "${DESTDIR}" rc-update del NetworkManager default
				;;
			"BootNet")
				chroot "${DESTDIR}" rc-update add NetworkManager default
				;;
			"BootNoBluetooth")
				chroot "${DESTDIR}" rc-update del bluetooth default
				;;
			"BootBluetooth")
				chroot "${DESTDIR}" rc-update add bluetooth default
				;;
			"BootConsole")
				chroot "${DESTDIR}" rc-update del xdm default
				;;
			"BootX")
				chroot "${DESTDIR}" rc-update add xdm default
				;;
		esac
	done
}

# setpassword()
# sets password for a user
# chroot must be prepared outside this function!
#
# parameters (required)
#  _USERNAME: Name of the user
#
# parameters (optional)
#  _PASSWORD: Preset password of the user
#
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#
setpassword(){
	# check input
	( check_num_args "${FUNCNAME}" 1 $# || check_num_args "${FUNCNAME}" 2 $# ) || return $?
	local _USERNAME="${1}"
	local _PASSWORD=
	local _PASSWORD2=
    if [ $# -gt 1 ]; then
        _PASSWORD="${2}"
        _PASSWORD2="${2}"
    fi
	local _RET_SUB=
    if [ -z "${_PASSWORD}" ]; then
        _PASSWORD="$(show_dialog --clear --insecure --passwordbox "Enter a password for user '${_USERNAME}'" 17 70)" || return $?
        _PASSWORD2="$(show_dialog --clear --insecure --passwordbox "Confirm password for user '${_USERNAME}'" 17 70)" || return $?
    fi
	if [ "${_PASSWORD}" != "${_PASSWORD2}" ]; then
		show_dialog --msgbox "Passwords do not match, unable to set password.  Please try again." 7 30
		return 1
	fi
	chroot "${DESTDIR}" /bin/bash <<EOF
echo -e "${_PASSWORD}\n${_PASSWORD2}" | passwd "${_USERNAME}" || exit $?
EOF
	_RET_SUB=$?
	_PASSWORD=
	_PASSWORD2=
	[ "${_RET_SUB}" -ne 0 ] && return "${_RET_SUB}"
	return 0
}

## END: dialog functions/definitions ##
#######################################

#####################
## begin execution ##

# check input
check_num_args "$(basename $0)" 1 $# || exit $?
CONFIG_LIST="${1}"
EDITOR=
DEFAULTITEM=
MENU_ITEMS=
NEWSELECTION=
USERNAME=
RETSUB=

# mount everything, including cryptsetup
"${SHAREDIR}"/FSspec mountall "${CONFIG_LIST}" || exit $?

chroot_mount || exit $?

# set system editor (if not already defined)
EDITOR="$(geteditor)" || exit $?

# define menu items
MENU_ITEMS=("Editor"				"System Editor" \
			"/etc/conf.d/keymaps"	"Keymap" \
			"/etc/fstab"		"Filesystem Mountpoints" \
			"/etc/resolv.conf"	"DNS Servers" \
			"/etc/hosts"		"Network Hosts" \
			"/etc/locale.gen"	"Glibc Locales" \
			"BootOpts"		"Set Boot time options (Networking/X)" \
			"Root-Password"		"Set the root password" \
			"Set-Username"		"Change your username from pentoo" \
			"Change-Hostname"	"Change your hostname from pentoo" \
			"DONE"			"Return to Main Menu" )

# settings for headless mode
USERNAME_PRESET=
PASSWORD_PRESET=
if [ -n "${INSTALLER_HEADLESS:-}" ]; then
    DEFAULTITEM='--default-item DONE'
    if [ -n "${INSTALLER_CONFIGFILE}" ]; then
        # remove comments
        CONF_FULL="$(< "${INSTALLER_CONFIGFILE}" jq 'del(..|.["#"]?)')" || exit $?
        # check if username and password are set
        if echo "${CONF_FULL}" | jq -e ".username" 1>/dev/null \
            && echo "${CONF_FULL}" | jq -e ".userpass" 1>/dev/null; then
            USERNAME_PRESET="$(echo "${CONF_FULL}" | jq -re ".username")" || exit $?
            PASSWORD_PRESET="$(echo "${CONF_FULL}" | jq -re ".userpass")" || exit $?
            DEFAULTITEM='--default-item Set-Username'
        fi
    fi
fi

while true; do
	# expand menu items array below
	NEWSELECTION="$(show_dialog ${DEFAULTITEM} --menu "Configuration" \
		0 0 0 "${MENU_ITEMS[@]}")" || exit $?
	# call subscript by selected item
	case "${NEWSELECTION}" in
		# Return to main menu
		"DONE")
			break ;;
		# System Editor
		"Editor")
			EDITOR="$(seteditor)"
			# capture sub script exit
			RETSUB=$?
			;;
		"BootOpts")
			setbootopts
			RETSUB=$?
			;;
		# root password
		"Root-Password")
			setpassword 'root' 2> /dev/null
			# capture sub script exit
			RETSUB=$?
			;;
		"Set-Username")
			USERNAME="$(show_dialog --inputbox "Enter a username" 17 70 "${USERNAME_PRESET}")" \
				&& chroot "${DESTDIR}" usermod -l ${USERNAME} pentoo >> ${LOG} \
				&& chroot "${DESTDIR}" usermod -d /home/${USERNAME} -m ${USERNAME} >> ${LOG} \
				&& setpassword "${USERNAME}" "${PASSWORD_PRESET}" 2> /dev/null
				RETSUB=$?
				if [ "${RETSUB}" = 0 ]; then
					[ -w "${DESTDIR}/home/${USERNAME}/.config/gtk-3.0/bookmarks" ] && sed -i "s#/home/pentoo#/home/${USERNAME}#" "${DESTDIR}/home/${USERNAME}/.config/gtk-3.0/bookmarks"
					[ -d "${DESTDIR}/home/${USERNAME}/.config/xfce4/desktop/" ] && find "${DESTDIR}/home/${USERNAME}/.config/xfce4/desktop/" -name "icons.*.rc" -print0 | xargs -0 -I {} -P 0 sed -i -e "s#/home/pentoo#/home/${USERNAME}#" {}
					[ -d "${DESTDIR}/home/${USERNAME}/.config/xfce4/xfconf/xfce-perchannel-xml/" ] && find "${DESTDIR}/home/${USERNAME}/.config/xfce4/xfconf/xfce-perchannel-xml/" -name "*.xml" -print0 | xargs -0 -I {} -P 0 sed -i "s#/home/pentoo#/home/${USERNAME}#" {}
				fi
				if [ -n "${INSTALLER_HEADLESS:-}" ]; then
					DEFAULTITEM='--default-item DONE'
				fi
			;;
		"Change-Hostname")
			HOSTNAME="$(show_dialog --inputbox "Enter a hostname" 17 70)" \
				&& chroot "${DESTDIR}" sed -i "s/pentoo/${HOSTNAME}/" /etc/conf.d/hostname \
				&& chroot "${DESTDIR}" sed -i "s/pentoo/${HOSTNAME}/" /etc/hosts
			RETSUB=$?
			;;
		# add user
		"add-user")
			# 1. ask for user name
			# 2. set up user
			# 3. set password for user
			# 4. copy root profile
			# run rsync with nice dialog
			USERNAME="$(show_dialog --inputbox "Enter a username" 17 70)" \
				&& chroot "${DESTDIR}" useradd -m -G android,audio,cdrom,cdrw,kismet,pcscd,plugdev,portage,usb,users,uucp,video,wheel,wireshark ${USERNAME} \
				&& setpassword "${USERNAME}" 2> /dev/null \
				&& show_dialog_rsync '-r --progress --exclude=.svn --exclude=.subversion' \
					"${DESTDIR}"'/root/.[!.]*' \
					"${DESTDIR}/home/${USERNAME}/" \
					"Syncing ${DESTDIR}/home/${USERNAME}/ ..." \
				&& chroot "${DESTDIR}" chown -R "${USERNAME}":"${USERNAME}" "/home/${USERNAME}" >>"${LOG}"
			RETSUB=$?
			;;
		# locales
		"/etc/locale.gen")
			chroot "${DESTDIR}" "${EDITOR}" "${NEWSELECTION}" \
				&& chroot "${DESTDIR}" locale-gen 1>&2
			RETSUB=$?
			;;
		#regular file
		*)
			chroot "${DESTDIR}" "${EDITOR}" "${NEWSELECTION}"
			RETSUB=$?
			;;
	esac
	sync || exit $?
	# handle errors from sub-script/functions using a common utility function
	catch_menuerror "$(basename $0)" "${NEWSELECTION}" "${RETSUB}"
done

chroot_umount || exit $?

exit 0
